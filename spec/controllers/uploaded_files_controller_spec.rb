require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UploadedFilesController, type: :controller do
  before :each do
    file = fixture_file_upload("files/LICENSE", "text/plain")
    @lecturer = FactoryBot.create(:user, :lecturer)
    @lecture = FactoryBot.create(:lecture, lecturer: @lecturer)
    @file = Hash.new
    @file["uploaded_file"] = Hash.new
    @file["uploaded_file"]["attachment"] = file
    @file["uploaded_file"]["lecture"] = @lecture.id
    sign_in @lecturer
  end
  it "returns success" do
    post :create, params: @file
    expect(response).to redirect_to(uploaded_files_url)
  end

  it "stores the file" do
    old_count = UploadedFile.count
    post :create, params: @file
    expect(response).to redirect_to(uploaded_files_url)
    expect(UploadedFile.count).to eq(old_count + 1)
  end

  it "requires authentication" do
    sign_out @lecturer
    old_count = UploadedFile.count
    post :create, params: @file
    expect(response).to_not redirect_to(uploaded_files_url)
    expect(UploadedFile.count).to eq(old_count)
  end

  it "stores the file only if lecture provided" do
    old_count = UploadedFile.count
    @file["uploaded_file"].except!("lecture")
    post :create, params: @file
    expect(response).to_not redirect_to(uploaded_files_url)
    expect(UploadedFile.count).to eq(old_count)
  end

  it "stores the file only if valid lecture provided" do
    old_count = UploadedFile.count
    @file["uploaded_file"]["lecture"] = -1
    post :create, params: @file
    expect(response).to_not redirect_to(uploaded_files_url)
    expect(UploadedFile.count).to eq(old_count)
  end

  it "stores the file only if valid file provided" do
      old_count = UploadedFile.count
      @file["uploaded_file"].except!("attachment")
      post :create, params: @file
      expect(response).to_not redirect_to(uploaded_files_url)
      expect(UploadedFile.count).to eq(old_count)
    end
end
